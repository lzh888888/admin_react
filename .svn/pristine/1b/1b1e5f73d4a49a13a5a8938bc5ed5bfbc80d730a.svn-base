import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import { Spin, Table, Card, Dropdown, Menu, Icon, Button, Divider, Popconfirm, Avatar, Input } from 'antd';
import PageHeaderLayout from '../../../layouts/PageHeaderLayout';

import Add from './Add';
import ModalEdit from './ModalEdit';
import ModalDetail from './ModalDetail';

import imgs from '../../../common/imgs';
import styles from './index.less';

const { Search } = Input;

@connect(({
  user,
  subunit,
  loading,
}) => ({
  user,
  subunit,
  getLoading: !!loading.effects['subunit/get'],
  delLoading: !!loading.effects['subunit/del'],
}))
export default class extends PureComponent {
  constructor(props) {
    super(props);
    this.columns = [{
      title: '图片',
      dataIndex: 'image',
      width: 180,
      render: (text) => {
        return (
          <Avatar src={text || imgs['logo']} shape="square" size="large" />
        );
      },
      // }, {
      //     title: '用户号',
      //     dataIndex: 'userno',
      //     width: 160,
    }, {
      title: '用户名',
      dataIndex: 'username',
      width: 180,
    }, {
      title: '公司名称',
      dataIndex: 'companyname',
      width: 180,
    }, {
      title: '用户类型',
      dataIndex: 'usertype',
      width: 180,
    }, {
      title: '手机号码',
      dataIndex: 'linkphone',
      width: 180,
    }, {
      title: '联系电话',
      dataIndex: 'tel',
      width: 180,
    }, {
      title: '地址',
      dataIndex: 'address',
      width: 180,
    }, {
      title: '发票类型',
      dataIndex: 'invoicetype',
      width: 180,
    }, {
      title: '是否允许使用',
      dataIndex: 'allow',
      width: 250,
      render: (value) => {
        if (value === '1') {
          return (
            <span>是</span>
          );
        } else if (value === '0') {
          return (
            <span>否</span>
          );
        }
      },
      // }, {
      //   title: '登录次数',
      //   dataIndex: 'logincnt',
      //   width: 210,
    }, {
      title: '操作',
      key: 'action',
      fixed: 'right',
      width: 180,
      render: text => (
        <Fragment>
          <a onClick={() => this.gotoDetail(text)}>详细</a>
          <Divider type="vertical" />
          <Dropdown
            overlay={
              <Menu>
                <Menu.Item>
                  <a onClick={() => this.onAction(text, '编辑')}>编辑</a>
                </Menu.Item>
                <Menu.Item>
                  <Popconfirm title="确定删除？" onConfirm={() => this.onAction(text, '删除')}>
                    <a>删除</a>
                  </Popconfirm>
                </Menu.Item>
              </Menu>
            }
          >
            <a>更多 <Icon type="down" /></a>
          </Dropdown>
        </Fragment>
      ),
    }];
  }

  componentDidMount() {
    this.getList();
  }

  componentWillUnmount() {
    this.props.dispatch({ type: 'subunit/_clear' });
  }

  // 查询
  onSearch(value) {
    this.reUrlP({
      page: 1,
      keyword: value,
    });
  }

  // 页数切换
  onPageSwitch = (pagination) => {
    this.reUrlP({
      page: pagination.current,
    });
  }

  // 处理
  onAction = (item, type) => {
    const { phoneno } = this.props.user.currentUser;
    if (type === '编辑') {
      this.props.dispatch({
        type: 'subunit/_showModal',
        payload: { type: 'Edit', item },
      });
    } else if (type === '删除') {
      this.props.dispatch({
        type: 'subunit/del',
        payload: {
          billno: item.billno,
          userno: phoneno,
        },
      });
    }
  }

  // 获取数据
  getList = () => {
    this.props.dispatch({ type: 'subunit/get' });
  }

  // 修改所需的请求参数后再获取数据
  reUrlP = (params) => {
    this.props.dispatch({
      type: 'subunit/_changeReqParams',
      payload: params,
    });
    this.getList();
  }

  // 新增
  gotoAdd = () => {
    this.props.dispatch({
      type: 'subunit/_showModal',
      payload: { type: 'Add', item: {} },
    });
  }


  // 详情
  gotoDetail = (text) => {
    this.props.dispatch({
      type: 'subunit/_showModal',
      payload: { type: 'Detail', item: text },
    });
  }

  render() {
    const {
      subunit: { listData, reqParams },
      getLoading,
      delLoading,
    } = this.props;
    const extraContent = (
      <div className={styles.extraContent}>
        <Search
          className={styles.extraContentSearch}
          placeholder="用户名称"
          onSearch={value => this.onSearch(value)}
          enterButton
        />
      </div>
    );
    const AddBtn = (
      <Button
        type="primary"
        icon="plus"
        onClick={this.gotoAdd}
      >
        新增下属
      </Button>
    );
    return (
      <PageHeaderLayout>
        <div className={styles.tableList}>
          <Spin spinning={getLoading || delLoading} >
            <Card
              className={styles.listCard}
              title={AddBtn}
              bordered={false}
              extra={extraContent}
            >
              {/* <div className={styles.tableListOperator}>
                <Button icon="plus" type="primary" onClick={this.gotoAdd}>
                  新增下属
                </Button>
              </div> */}
              <Table
                // className={styles.table}
                // scroll={{ x: 1250, y: 350 }}
                rowKey="id"
                columns={this.columns}
                dataSource={listData.list}
                onChange={this.onPageSwitch}
                pagination={{
                  current: reqParams.page,
                  defaultCurrent: 1,
                  defaultPageSize: 15,
                  total: listData.total,
                }}
              />
            </Card>
          </Spin>
        </div>
        {<Add />}
        {<ModalEdit />}
        {<ModalDetail />}
      </PageHeaderLayout>
    );
  }
}
