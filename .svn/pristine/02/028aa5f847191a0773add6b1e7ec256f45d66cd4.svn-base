import React, { PureComponent, Fragment } from 'react';
import { connect } from 'dva';
import { Spin, Table, Card, Divider, Popconfirm, Button, DatePicker } from 'antd';
import moment from 'moment';
import PageHeaderLayout from '../../../layouts/PageHeaderLayout';

import Add from './Add';
// import Edit from './Edit';
import Detail from './Detail';
import styles from './index.less';

const RangePicker = DatePicker.RangePicker;

@connect(({
  user,
  recharge,
  loading,
}) => ({
  user,
  recharge,
  getLoading: !!loading.effects['recharge/get'],
  delLoading: !!loading.effects['recharge/del'],
}))
export default class extends PureComponent { 
  constructor(props) {
    super(props);
    this.columns = [{
        title: '本次金额',
        dataIndex: 'fee',
        width: 180,
      }, {
        title: '原有金额',
        dataIndex: 'orig_fee',
        width: 180,
      }, {
        title: '当前金额',
        dataIndex: 'curr_fee',
        width: 180,
      }, {
        title: '金额种类',
        dataIndex: 'fee_type',
        width: 180,
      }, {
        title: '付款方式',
        dataIndex: 'pay_type',
        width: 180,
      }, {
        title: '网银付款返回码',
        dataIndex: 'app_id',
        width: 180,
      }, {
        title: '付款状态',
        dataIndex: 'status',
        width: 180,
        render: (value) => {
          if (value === '0') {
            return (
              <span>不成功</span>
            );
          } else if (value === '1') {
            return (
              <span>成功</span>
            );
          } 
        },
      }, {
        title: '操作',
        key: 'action',
        fixed: 'right',
        width: 180,
        render: text => (
          <Fragment>
            <a onClick={() => this.gotoDetail(text)}>详细</a>
            <Divider type="vertical" />
            <Popconfirm title="确定删除？" onConfirm={() => this.onAction(text, '删除')}>
              <a>删除</a>
            </Popconfirm>
          </Fragment>
        ),
      }];
    this.dateStrings = null;
  }

  componentDidMount() {
    this.getList();
  }

  componentWillUnmount() {
    this.props.dispatch({ type: 'recharge/_clear' });
  }

  // 查询
  onSearch(value) {
    this.changeReqParams({
      page: 1,
      keyword: value,
    });
  }

  // 处理
  onAction = (item, type) => {
    const { phoneno } = this.props.user.currentUser;
    if (type === '编辑') {
      this.props.dispatch({
        type: 'recharge/_showModal',
        payload: { type: 'Edit', item },
      });
    } else if (type === '删除') {
      this.props.dispatch({
        type: 'recharge/del',
        payload: {
          admin: phoneno,
          printname: item.printname,
          brand: item.brand,
          sn: item.printer,
        },
      });
    }
  }

  

   // 选择日期查询
   onDateSearch = () => {
    let params = {};
    if (this.dateStrings !== null) {
      params = {
        ...params,
        start: this.dateStrings[0],
        end: this.dateStrings[1],
      }
    }
    this.props.dispatch({
      type: 'recharge/_changeReqParams',
      payload: params,
    });
    this.getList();
  }
  

  // 页数切换
  onPageSwitch = (pagination) => {
    this.changeReqParams({
      page: pagination.current,
    });
  }

  // 获取数据
  getList = () => {
    this.props.dispatch({ type: 'recharge/get' });
  }

  // 修改所需的请求参数后再获取数据
  changeReqParams = (params) => {
    this.props.dispatch({
      type: 'recharge/_changeReqParams',
      payload: params,
    });
    this.getList();
  }

  // 查看详情
  gotoDetail = (text) => {
    this.props.dispatch({
      type: 'recharge/_showModal',
      payload: { type: 'Detail', item: text },
    });
  }

  // 添加
  gotoAdd = () => {
    this.props.dispatch({
      type: 'recharge/_showModal',
      payload: { type: 'Add', item: {} },
    });
  }

  render() {
    const {
      recharge: { listData, reqParams },
      getLoading,
      delLoading,
    } = this.props;
    return (
      <PageHeaderLayout>
        <div className={styles.tableList}>
          <Spin spinning={getLoading || delLoading}>
            <Card
              className={styles.listCard}
              bordered={false}
            >
              <div className={styles.tableListOperator}>
                <RangePicker
                  defaultValue={[moment(`${moment().format('YYYY-MM')}-01`), moment(moment(), 'YYYY-MM-DD')]}
                  onChange={(dates, dateStrings) => this.dateStrings = dateStrings}
                />
                <Button type="primary" style={{ marginLeft: 20 }} onClick={this.onDateSearch}>
                  查询
                </Button>
              </div>
              <Table
                // className={styles.table}
                // scroll={{ x: 1250, y: 350 }}
                rowKey="id"
                columns={this.columns}
                dataSource={listData.list}
                onChange={this.onPageSwitch}
                pagination={{
                  current: reqParams.page,
                  defaultCurrent: 1,
                  defaultPageSize: 15,
                  total: listData.total,
                }}
              />
            </Card>
          </Spin>
        </div>
        <Add />
        {/* <Edit /> */}
        <Detail />
      </PageHeaderLayout>
    );
  }
}
