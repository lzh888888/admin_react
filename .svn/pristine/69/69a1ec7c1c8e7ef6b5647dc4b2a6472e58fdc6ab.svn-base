import React, { PureComponent } from 'react';
import { connect } from 'dva';
import { Spin, Card, Button, Form, Input, message } from 'antd';
// import moment from 'moment';
import PageHeaderLayout from '../../layouts/PageHeaderLayout';
import ChooseImage from '../../cps/ChooseImage';

import styles from './index.less';

@connect(({
  user,
  resturant: { activeItem },
  loading,
}) => ({
  user,
  activeItem,
  loading: !!loading.effects['resturant/get'],
}))
@Form.create()
export default class extends PureComponent {

  constructor(props) {
    super(props);
    this.images = {};
    this.state = {
      isSetStatus: false,
    }
  }

  componentDidMount() {
    this.getcompanyinfo();
  }

  // 编辑表单时显示
  onToggleEdit = () => {
    this.setState({
      isSetStatus: !this.state.isSetStatus,
    })
  }

  // 获取数据
  getcompanyinfo = () => {
    this.props.dispatch({ type: 'resturant/get' });
  }

  setcompanyinfo = (e) => {
    e.preventDefault();
    const {
      user,
      activeItem,
      form: { validateFieldsAndScroll },
      dispatch,
    } = this.props;
    validateFieldsAndScroll((err, values) => {
      if (err) return;
      const data = {
        uid: user.currentUser.phoneno,
        title: activeItem.title || '',
        image: activeItem.image,
        image1: activeItem.image1,
        image2: activeItem.image2,
        image3: activeItem.image3,
        province: activeItem.province || '',
        city: activeItem.city || '',
        area: activeItem.area || '',
        address: activeItem.address || '',
        sect: activeItem.sect || '',
        linkman: activeItem.linkman || '',
        tel: activeItem.tel || '',
        remark: activeItem.remark || '',
        memo: activeItem.memo || '',
        ...this.images,
        ...values,
      };
      if (!data.image) {
        message.error('请至少上传一张图片！');
        return;
      }
      dispatch({ type: 'resturant/set', payload: data });
    });
  }

  renderAvatar = () => {
    const {
      activeItem,
    } = this.props;
    return (
      <div className="avatar-container">
        <ChooseImage
          source={activeItem.image}
          onClear={() => this.images.image = ''}
          onChange={base64 => this.images.image = base64}
        />
        <ChooseImage
          source={activeItem.image1}
          onClear={() => this.images.image1 = ''}
          onChange={base64 => this.images.image1 = base64}
        />
        <ChooseImage
          source={activeItem.image2}
          onClear={() => this.images.image2 = ''}
          onChange={base64 => this.images.image2 = base64}
        />
        <ChooseImage
          source={activeItem.image3}
          onClear={() => this.images.image3 = ''}
          onChange={base64 => this.images.image3 = base64}
        />
      </div>
    );
  }


  render() {
    const {
      activeItem,
      loading,
      form: { getFieldDecorator },
    } = this.props;

    // 基础表单参数
    const basicFormProps = {
      labelCol: {
        span: 6,
      },
      wrapperCol: {
        span: 14,
      },
      // hasFeedback: true,
    };
    return (
      <PageHeaderLayout>
        <div className={styles.tableList}>
          <Spin spinning={loading}>
            <Card
              bordered={false}
            >
              <Form layout="horizontal" onClick={this.onToggleEdit}>
                <Form.Item {...basicFormProps} label="图片">
                  {/* <Avatar src={activeItem.image} size="large" style={{ width: 80, height: 80 }} /> */}
                  {this.renderAvatar()}
                </Form.Item>
                <Form.Item {...basicFormProps} label="餐厅名称">
                  {getFieldDecorator('title', {
                    initialValue: activeItem.title,
                    rules: [{ required: true, message: '餐厅名称' }],
                  })(
                    <Input placeholder="请输入餐厅名称" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="省份">
                  {getFieldDecorator('province', {
                    initialValue: activeItem.province,
                    rules: [{ required: true, message: '省份' }],
                  })(
                    <Input placeholder="请输入省份" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="城市">
                  {getFieldDecorator('city', {
                    initialValue: activeItem.city,
                    rules: [{ required: true, message: '城市' }],
                  })(
                    <Input placeholder="请输入城市" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="区域">
                  {getFieldDecorator('area', {
                    initialValue: activeItem.area,
                    rules: [{ required: true, message: '区域' }],
                  })(
                    <Input placeholder="请输入区域" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="餐厅地址">
                  {getFieldDecorator('address', {
                    initialValue: activeItem.address,
                    rules: [{ required: true, message: '餐厅地址' }],
                  })(
                    <Input placeholder="请输入餐厅地址" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="菜式派系">
                  {getFieldDecorator('sect', {
                    initialValue: activeItem.sect,
                    rules: [{ required: false, message: '菜式派系' }],
                  })(
                    <Input placeholder="请输入菜式派系" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="联系电话">
                  {getFieldDecorator('tel', {
                    initialValue: activeItem.tel,
                    rules: [{ required: true, message: '联系电话' }],
                  })(
                    <Input placeholder="请输入联系电话" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="简介">
                  {getFieldDecorator('remark', {
                    initialValue: activeItem.remark,
                    rules: [{ required: false, message: '简介' }],
                  })(
                    <Input placeholder="请输入简介" />
                  )}
                </Form.Item>
                <Form.Item {...basicFormProps} label="描述">
                  {getFieldDecorator('memo', {
                    initialValue: activeItem.memo,
                    rules: [{ required: true, message: '描述' }],
                  })(
                    <Input placeholder="请输入描述" />
                  )}
                  {this.state.isSetStatus && (
                    <Button type="primary" style={{ marginTop: 20 }} onClick={this.setcompanyinfo}>确定修改</Button>
                  )}
                </Form.Item >
                {/* <Form.Item {...basicFormProps} label="描述">
              </Form.Item > */}
              </Form>
            </Card>
          </Spin>
        </div>
      </PageHeaderLayout>
    );
  }
}
