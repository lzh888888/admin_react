import React, { PureComponent } from 'react';
import { connect } from 'dva';
import { Form, Input, Radio, Modal } from 'antd';

import ChooseImage from '../../../cps/ChooseImage';



import { checkPhone } from '../../../utils/tools';
// import styles from './Add.less';

@connect(({
  user,
  subunit,
  loading,
}) => ({
  user,
  subunit,
  loading: !!loading.effects['subunit/add'],
}))
@Form.create()
export default class extends PureComponent {
  constructor(props) {
    super(props);
    this.images = {};
  }

  // 弹出框关闭后要清空
  handAfterClose = () => {
    this.images = {};
  }

  handCancel = () => {
    this.props.dispatch({
      type: 'subunit/_hideModal',
      payload: { type: 'Add' },
    });
  }

  // 请求
  handleSubmit = (e) => {
    e.preventDefault();
    const {
      user,
      dispatch,
      form: { validateFieldsAndScroll },
    } = this.props;
    validateFieldsAndScroll((err, values) => {
      if (err) return;
      const data = {
        billno: '',
        image: '',
        // image1: '',
        // image2: '',
        // image3: '',
        username: '',
        phoneno: '',
        linkman: '',
        tel: '',
        linkphone: '',
        address: '',
        companyname: '',
        bank: '',
        bankno: '',
        allow: '',
        admin: user.currentUser.phoneno,
        flat: '0',
        ...this.images,
        ...values,
      };
      // if (!data.image) {
      //   message.error('请至少上传一张图片！');
      //   return;
      // }
      dispatch({ type: 'subunit/add', payload: data });
    });
  }

  renderAvatar = () => {
    return (
      <div className="avatar-container">
        <ChooseImage
          onClear={() => this.images.image = ''}
          onChange={base64 => this.images.image = base64}
        />
        {/* <ChooseImage
          onClear={() => this.images.image2 = ''}
          onChange={base64 => this.images.image2 = base64}
        />
        <ChooseImage
          onClear={() => this.images.image3 = ''}
          onChange={base64 => this.images.image3 = base64}
        /> */}
      </div>
    );
  }

  render() {
    const {
      loading,
      subunit: { showModalAdd },
      form: { getFieldDecorator },
    } = this.props;

    // 基础表单参数
    const basicFormProps = {
      labelCol: {
        span: 6,
      },
      wrapperCol: {
        span: 14,
      },
      hasFeedback: true,
    };
    // const basicFormProps = {
    //   labelCol: {
    //     xs: { span: 24 },
    //     sm: { span: 7 },
    //   },
    //   wrapperCol: {
    //     xs: { span: 24 },
    //     sm: { span: 12 },
    //     md: { span: 10 },
    //   },
    //   hasFeedback: true,
    // };

    // const submitFormLayout = {
    //   wrapperCol: {
    //     xs: { span: 24, offset: 0 },
    //     sm: { span: 10, offset: 7 },
    //   },
    // };

    return (
      <Modal
        title="新增下属"
        destroyOnClose
        maskClosable={false}
        visible={showModalAdd}
        confirmLoading={loading}
        onOk={this.handleSubmit}
        onCancel={this.handCancel}
        afterClose={this.handAfterClose}
      >
        <Form layout="horizontal">
          <Form.Item {...basicFormProps} label="用户名称">
            {getFieldDecorator('username', {
              initialValue: '',
              rule: [{ required: true, message: '请输入用户名称' }],
            })(
              <Input placeholder="用户名称" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="用户ID">
            {getFieldDecorator('phoneno', {
              initialValue: '',
              rules: [{
                required: true, message: '请输入用户ID',
              }, {
                validator: checkPhone,
              }],
            })(
              <Input placeholder="用户ID为手机号码" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="公司名称">
            {getFieldDecorator('companyname', {
              initialValue: '',
            })(
              <Input placeholder="公司名称" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="联系人">
            {getFieldDecorator('linkman', {
              initialValue: '',
            })(
              <Input placeholder="联系人" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="手机号码">
            {getFieldDecorator('linkphone', {
              rules: [{
                required: true, message: '请输入手机号码',
              }, {
                validator: checkPhone,
              }],
            })(
              <Input placeholder="手机号码" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="联系电话">
            {getFieldDecorator('tel', {
              initialValue: '',
            })(
              <Input placeholder="联系电话" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="联系地址">
            {getFieldDecorator('address', {
              initialValue: '',
            })(
              <Input placeholder="联系地址" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="银行名称">
            {getFieldDecorator('bank', {
              initialValue: '',
            })(
              <Input placeholder="银行名称" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="银行账号">
            {getFieldDecorator('bankno', {
              initialValue: '',
            })(
              <Input placeholder="银行账号" />
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="是否允许使用" hasFeedback={false}>
            {getFieldDecorator('allow', {
              initialValue: '1',
              rules: [{ required: true, message: '请选择是或否' }],
            })(
              <Radio.Group>
                <Radio value="1">是</Radio>
                <Radio value="0">否</Radio>
              </Radio.Group>
            )}
          </Form.Item>
          <Form.Item {...basicFormProps} label="图片">
            {this.renderAvatar()}
          </Form.Item>
          {/* <Form.Item {...submitFormLayout} style={{ marginTop: 32 }}>
                <Button type="primary" htmlType="submit" loading={false}>
                  提交
                </Button>
              </Form.Item> */}
        </Form>
      </Modal>
    );
  }
}
