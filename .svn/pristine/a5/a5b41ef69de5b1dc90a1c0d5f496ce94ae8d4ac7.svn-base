import { message } from 'antd';
import http from '../utils/http';

// 获取
async function __get(params) {
  return http({ method: 'get', api: 'getvip', params });
}
async function __add(params) {
  return http({ method: 'get', api: 'setvip', params });
}
// async function __del(params) {
//   return http({ method: 'get', api: 'deluser', params });
// }

async function __charge(params) {
  return http({ method: 'get', api: 'vipcharge', params });
}

const initState = {
  listData: {
    list: [],
    total: 0,
  },

  // 选中项，编辑和详情需要获取项数据
  activeItem: {},

  // 弹出框的打开和关闭
  showModalAdd: false,
  showModalEdit: false,
  showModalDetail: false,
  showModalCharge: false,
  showModalCharger: false,
  // 请求参数
  reqParams: {
    page: 1,
    uid: '',
    admin: '',
  },
};

export default {
  namespace: 'vip',

  state: initState,

  effects: {
    *get(_, { call, put, select }) {
      try {
        const { user, vip } = yield select(state => state);
        const params = {
          ...vip.reqParams,
          uid: user.currentUser.phoneno,
          admin: user.currentUser.phoneno,
        };

        const { success, msg, data } = yield call(__get, params);
        if (success === '0') {
          yield put({
            type: '_appendListData',
            payload: { list: data.list, total: Number(data.total) },
          });
        } else {
          message.warn(msg);
          yield put({
            type: '_appendListData',
            payload: { list: [], total: 0 },
          });
        }
      } catch (e) {
        //
      }
    },

    *add({ payload }, { put, call }) {
      try {
        const { status, msg } = yield call(__add, payload);
        if (status === '0') {
          message.success(msg);
          yield put({
            type: '_hideModal',
            payload: { type: 'Add' },
          });
          yield put({ type: 'get' });
        } else {
          message.warn(msg);
        }
      } catch (e) {
        //
      }
    },

    *edit({ payload }, { put, call }) {
      try {
        const { status, msg } = yield call(__add, payload);
        if (status === '0') {
          message.success(msg);
          yield put({
            type: '_hideModal',
            payload: { type: 'Edit' },
          });
          yield put({ type: 'get' });
        } else {
          message.warn(msg);
        }
      } catch (e) {
        //
      }
    },

    // *charger({ payload }, { put, call }) {
    //   try {
    //     const { status, msg } = yield call(__add, payload);
    //     if (status === '0') {
    //       message.success(msg);
    //       yield put({
    //         type: '_hideModal',
    //         payload: { type: 'Edit' },
    //       });
    //       yield put({ type: 'get' });
    //     } else {
    //       message.warn(msg);
    //     }
    //   } catch (e) {
    //     //
    //   }
    // },

    // *del({ payload }, { put, call }) {
    //   try {
    //     const { status, msg } = yield call(__del, payload);
    //     if (status === '0') {
    //       message.success(msg);
    //       yield put({ type: 'get' });
    //     } else {
    //       message.warn(msg);
    //     }
    //   } catch (e) {
    //     //
    //   }
    // },
  },

  *charge({ payload }, { put, call }) {
    // console.log("ddddddddddddddddddddddddddddddd");
    try {
      const { status, msg } = yield call(__charge, payload);
      if (status === '0') {
        message.success(msg);
        yield put({
          type: '_hideModal',
          payload: { type: 'Charge' },
        });
        yield put({ type: 'get' });
      } else {
        message.warn(msg);
      }
    } catch (e) {
      //
    }
  },

  reducers: {
    _appendListData(state, action) {
      return {
        ...state,
        listData: action.payload,
      };
    },

    // 修改请求参数
    _changeReqParams(state, action) {
      return {
        ...state,
        reqParams: {
          ...state.reqParams,
          ...action.payload,
        },
      };
    },

    _showModal(state, { payload }) {
      return {
        ...state,
        activeItem: payload.item || {},
        [`showModal${payload.type}`]: true,
      };
    },

    _hideModal(state, { payload }) {
      return { ...state, [`showModal${payload.type}`]: false };
    },

    // 该页面注销后要清除当前的状态，防止下次进来还是之前的数据
    _clear() {
      return initState;
    },
  },
};
