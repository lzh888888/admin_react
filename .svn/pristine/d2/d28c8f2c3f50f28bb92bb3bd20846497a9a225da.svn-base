import { createElement } from 'react';
import dynamic from 'dva/dynamic';
import pathToRegexp from 'path-to-regexp';
import { getMenuData } from './menu';

let routerDataCache;

const modelNotExisted = (app, model) => (
  // eslint-disable-next-line
  !app._models.some(({ namespace }) => {
    return namespace === model.substring(model.lastIndexOf('/') + 1);
  })
);

// wrapper of dynamic
const dynamicWrapper = (app, models, component) => {
  // () => require('module')
  // transformed by babel-plugin-dynamic-import-node-sync
  if (component.toString().indexOf('.then(') < 0) {
    models.forEach(model => {
      if (modelNotExisted(app, model)) {
        // eslint-disable-next-line
        app.model(require(`../models/${model}`).default);
      }
    });
    return props => {
      if (!routerDataCache) {
        routerDataCache = getRouterData(app);
      }
      return createElement(component().default, {
        ...props,
        routerData: routerDataCache,
      });
    };
  }
  // () => import('module')
  return dynamic({
    app,
    models: () => models.filter(
      model => modelNotExisted(app, model)).map(m => import(`../models/${m}.js`)
      ),
    // add routerData prop
    component: () => {
      if (!routerDataCache) {
        routerDataCache = getRouterData(app);
      }
      return component().then(raw => {
        const Component = raw.default || raw;
        return props =>
          createElement(Component, {
            ...props,
            routerData: routerDataCache,
          });
      });
    },
  });
};

function getFlatMenuData(menus) {
  let keys = {};
  menus.forEach((item) => {
    if (item.children) {
      keys[item.path] = { ...item };
      keys = { ...keys, ...getFlatMenuData(item.children) };
    } else {
      keys[item.path] = { ...item };
    }
  });
  return keys;
}

export const getRouterData = (app) => {
  const routerConfig = {
    '/': {
      component: dynamicWrapper(app, [], () => import('../layouts/BasicLayout')),
    },
    '/home': {
      component: dynamicWrapper(app, ['user','home'], () => import('../routes/Home')),
      hideInBreadcrumb: true,
      // name: '首页',
      // authority: 'admin', // 配置准入权限
    },

    // 用户信息
    '/userinfo': {
      component: dynamicWrapper(app, ['user'], () => import('../routes/Userinfo')),
    },

    // 运营情况
    '/operations/operate': { // 运营查询
      component: dynamicWrapper(app, ['operate'], () => import('../routes/Operations/Operate')),
    },
    '/operations/month': { // 月度统计
      component: dynamicWrapper(app, ['month'], () => import('../routes/Operations/Month')),
    },
    '/operations/sales': { // 销量分析
      component: dynamicWrapper(app, ['sales'], () => import('../routes/Operations/Sales')),
    },
    '/operations/caterer': { // 点餐员分析
      component: dynamicWrapper(app, ['caterer'], () => import('../routes/Operations/Caterer')),
    },

    // 系统设置
    '/system/rooms': { // 桌号设置
      component: dynamicWrapper(app, ['approve', 'rooms'], () => import('../routes/System/Rooms')),
    },
    '/system/dishes': { // 菜品设置
      component: dynamicWrapper(app, ['dishes'], () => import('../routes/System/Dishes')),
    },
    '/system/manage': { // 管理点餐员
      component: dynamicWrapper(app, ['catererManage'], () => import('../routes/System/Manage')),
    },
    '/system/printer': { // 云打印机设置
      component: dynamicWrapper(app, ['cloudPrint'], () => import('../routes/System/Printer')),
    },
    '/system/pay': { // 云打印机设置
      component: dynamicWrapper(app, ['pay'], () => import('../routes/System/Pay')),
    },
    '/system/qrcode': { // 云打印机设置
      component: dynamicWrapper(app, [], () => import('../routes/System/Qrcode')),
    },

    // 会员管理
    '/member/vip': { // 会员资料
      component: dynamicWrapper(app, ['vip'], () => import('../routes/Member/Vip')),
    },
    '/member/consumption': { // 消费记录
      component: dynamicWrapper(app, ['consumption'], () => import('../routes/Member/Consumption')),
    },
    '/member/recharge': { // 充值记录
      component: dynamicWrapper(app, ['recharge'], () => import('../routes/Member/Recharge')),
    },
    '/member/integral': { // 积分纪录
      component: dynamicWrapper(app, ['integral'], () => import('../routes/Member/Integral')),
    },

    // 财务管理
    '/finance/renew': { // 续费记录
      component: dynamicWrapper(app, ['renew'], () => import('../routes/Finance/Renew')),
    },
    '/finance/receivables': { // 网络收款记录
      component: dynamicWrapper(app, ['receivables'], () => import('../routes/Finance/Receivables')),
    },
    '/finance/refund': { // 网络退款记录
      component: dynamicWrapper(app, ['refund'], () => import('../routes/Finance/Refund')),
    },
    '/finance/invoice': { // 发票申请
      component: dynamicWrapper(app, ['invoice'], () => import('../routes/Finance/Invoice')),
    },

    
    // 原料管理
    '/materiamanage/stock': { // 库存状态
      component: dynamicWrapper(app, ['stock'], () => import('../routes/MaterialManage/Stock')),
    },







    // 代理公司
    '/agent/subunit': { // 下属代理商
      component: dynamicWrapper(app, ['subunit'], () => import('../routes/Agent/Subunit')),
    },
    '/agent/customer': { // 我的客户
      component: dynamicWrapper(app, ['customer'], () => import('../routes/Agent/Customer')),
    },
    '/agent/contract': { // 合同管理
      component: dynamicWrapper(app, ['contract', 'selectCustomer'], () => import('../routes/Agent/Contract')),
    },
    '/agent/mining': { // 客户挖掘
      component: dynamicWrapper(app, ['mining'], () => import('../routes/Agent/Mining')),
    },

    // 餐厅信息设置
    '/resturant': {
      component: dynamicWrapper(app, ['resturant'], () => import('../routes/Resturant')),
    },




    // 结果页
    '/result/success': {
      component: dynamicWrapper(app, [], () => import('../routes/Result/Success')),
    },
    '/result/fail': {
      component: dynamicWrapper(app, [], () => import('../routes/Result/Error')),
    },

    // 异常
    '/exception/403': {
      component: dynamicWrapper(app, [], () => import('../routes/Exception/403')),
    },
    '/exception/404': {
      component: dynamicWrapper(app, [], () => import('../routes/Exception/404')),
    },
    '/exception/500': {
      component: dynamicWrapper(app, [], () => import('../routes/Exception/500')),
    },

    // 登录注册
    '/user': {
      component: dynamicWrapper(app, [], () => import('../layouts/UserLayout')),
    },
    '/user/login': {
      component: dynamicWrapper(app, [], () => import('../routes/User/Login')),
    },
    '/user/register': {
      component: dynamicWrapper(app, ['register'], () => import('../routes/User/Register')),
    },
    '/user/register-result': {
      component: dynamicWrapper(app, [], () => import('../routes/User/RegisterResult')),
    },
    // '/user/:id': {
    //   component: dynamicWrapper(app, [], () => import('../routes/User/SomeComponent')),
    // },
  };
  // Get name from ./menu.js or just set it in the router data.
  const menuData = getFlatMenuData(getMenuData());

  // Route configuration data
  // eg. {name,authority ...routerConfig }
  const routerData = {};
  // The route matches the menu
  Object.keys(routerConfig).forEach(path => {
    // Regular match item name
    // eg.  router /user/:id === /user/chen
    const pathRegexp = pathToRegexp(path);
    const menuKey = Object.keys(menuData).find(key => pathRegexp.test(`${key}`));
    let menuItem = {};
    // If menuKey is not empty
    if (menuKey) {
      menuItem = menuData[menuKey];
    }
    let router = routerConfig[path];
    // If you need to configure complex parameter routing,
    // https://github.com/ant-design/ant-design-pro-site/blob/master/docs/router-and-nav.md#%E5%B8%A6%E5%8F%82%E6%95%B0%E7%9A%84%E8%B7%AF%E7%94%B1%E8%8F%9C%E5%8D%95
    // eg . /list/:type/user/info/:id
    router = {
      ...router,
      name: router.name || menuItem.name,
      authority: router.authority || menuItem.authority,
      hideInBreadcrumb: router.hideInBreadcrumb || menuItem.hideInBreadcrumb,
    };
    routerData[path] = router;
  });
  return routerData;
};